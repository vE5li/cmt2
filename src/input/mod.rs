mod modifiers;
mod binding;
mod event;

use seamonkey::*;
use sfml::window::Key;

pub use self::modifiers::Modifiers;
pub use self::binding::Binding;
pub use self::event::KeyEvent;

pub fn is_modifier_key(key: Key) -> bool {
    match key {
        Key::LSHIFT => return true,
        Key::RSHIFT => return true,
        Key::LALT => return true,
        Key::LSYSTEM => return true,
        Key::LCONTROL => return true,
        _other => return false,
    }
}

pub fn key_from_literal(literal: &SharedString) -> Status<Key> {
    match literal.printable().as_str() {
        "a" => return success!(Key::A),
        "b" => return success!(Key::B),
        "c" => return success!(Key::C),
        "d" => return success!(Key::D),
        "e" => return success!(Key::E),
        "f" => return success!(Key::F),
        "g" => return success!(Key::G),
        "h" => return success!(Key::H),
        "i" => return success!(Key::I),
        "j" => return success!(Key::J),
        "k" => return success!(Key::K),
        "l" => return success!(Key::L),
        "m" => return success!(Key::M),
        "n" => return success!(Key::N),
        "o" => return success!(Key::O),
        "p" => return success!(Key::P),
        "q" => return success!(Key::Q),
        "r" => return success!(Key::R),
        "s" => return success!(Key::S),
        "t" => return success!(Key::T),
        "u" => return success!(Key::U),
        "v" => return success!(Key::V),
        "w" => return success!(Key::W),
        "x" => return success!(Key::X),
        "y" => return success!(Key::Y),
        "z" => return success!(Key::Z),
        "0" => return success!(Key::NUM0),
        "1" => return success!(Key::NUM1),
        "2" => return success!(Key::NUM2),
        "3" => return success!(Key::NUM3),
        "4" => return success!(Key::NUM4),
        "5" => return success!(Key::NUM5),
        "6" => return success!(Key::NUM6),
        "7" => return success!(Key::NUM7),
        "8" => return success!(Key::NUM8),
        "9" => return success!(Key::NUM9),
        "escape" => return success!(Key::ESCAPE),
        "control" => return success!(Key::LCONTROL),
        "shift" => return success!(Key::LSHIFT),
        "alt" => return success!(Key::LALT),
        "system" => return success!(Key::LSYSTEM),
        "menu" => return success!(Key::MENU),
        "left_bracket" => return success!(Key::LBRACKET),
        "right_bracket" => return success!(Key::RBRACKET),
        "semicolon" => return success!(Key::SEMICOLON),
        "comma" => return success!(Key::COMMA),
        "period" => return success!(Key::PERIOD),
        "quote" => return success!(Key::QUOTE),
        "slash" => return success!(Key::SLASH),
        "backslash" => return success!(Key::BACKSLASH),
        "tilde" => return success!(Key::TILDE),
        "equal" => return success!(Key::EQUAL),
        "hyphen" => return success!(Key::HYPHEN),
        "space" => return success!(Key::SPACE),
        "enter" => return success!(Key::ENTER),
        "backspace" => return success!(Key::BACKSPACE),
        "tab" => return success!(Key::TAB),
        "pageup" => return success!(Key::PAGEUP),
        "pagedown" => return success!(Key::PAGEDOWN),
        "end" => return success!(Key::END),
        "start" => return success!(Key::HOME),
        "insert" => return success!(Key::INSERT),
        "delete" => return success!(Key::DELETE),
        "add" => return success!(Key::ADD),
        "subtract" => return success!(Key::SUBTRACT),
        "multiply" => return success!(Key::MULTIPLY),
        "divide" => return success!(Key::DIVIDE),
        "left" => return success!(Key::LEFT),
        "right" => return success!(Key::RIGHT),
        "up" => return success!(Key::UP),
        "down" => return success!(Key::DOWN),
        "numpad_0" => return success!(Key::NUMPAD0),
        "numpad_1" => return success!(Key::NUMPAD1),
        "numpad_2" => return success!(Key::NUMPAD2),
        "numpad_3" => return success!(Key::NUMPAD3),
        "numpad_4" => return success!(Key::NUMPAD4),
        "numpad_5" => return success!(Key::NUMPAD5),
        "numpad_6" => return success!(Key::NUMPAD6),
        "numpad_7" => return success!(Key::NUMPAD7),
        "numpad_8" => return success!(Key::NUMPAD8),
        "numpad_9" => return success!(Key::NUMPAD9),
        "f1" => return success!(Key::F1),
        "f2" => return success!(Key::F2),
        "f3" => return success!(Key::F3),
        "f4" => return success!(Key::F4),
        "f5" => return success!(Key::F5),
        "f6" => return success!(Key::F6),
        "f7" => return success!(Key::F7),
        "f8" => return success!(Key::F8),
        "f9" => return success!(Key::F9),
        "f10" => return success!(Key::F10),
        "f11" => return success!(Key::F11),
        "f12" => return success!(Key::F12),
        "f13" => return success!(Key::F13),
        "f14" => return success!(Key::F14),
        "f15" => return success!(Key::F15),
        "pause" => return success!(Key::PAUSE),
        invalid => return error!(string!("invalid key {}", invalid)),
    }
}
