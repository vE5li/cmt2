#comment_tokenizer { #block_comments [ [ "@@" "@@" ] ] #line_comments [ "@" ] #notes { "FIX " fix "TODO " todo "WIP " wip } } #number_tokenizer { #floats [ '.' ] #formats { #none { #none decimal "B" binary "D" decimal "X" hexadecimal "Z" duodecimal } "0b" { #none binary } "0d" { #none decimal } "0x" { #none hexadecimal } "0z" { #none duodecimal } } #systems { binary [ '0' '1' ] decimal [ '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' ] duodecimal [ '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'X' 'E' ] hexadecimal [ '0' '1' '2' '3' '4' '5' '6' '7' '8' '9' 'A' 'B' 'C' 'D' 'E' 'F' ] } } #character_tokenizer { #delimiters [ [ "\'" "\'" ] ] #replace { "backslash" '\\' "backspace" '\b' "character" '\'' "close" '}' "escape" '\e' "newline" '\n' "null" '\[0]' "open" '{' "return" '\r' "string" '\"' "tab" '\t' } } #string_tokenizer { #delimiters [ [ "\"" "\"" ] ] #replace { "{backslash}" '\\' "{backspace}" '\b' "{character}" '\'' "{close}" '}' "{escape}" '\e' "{newline}" '\n' "{null}" '\[0]' "{open}" '{' "{return}" '\r' "{string}" '\"' "{tab}" '\t' } } #operator_tokenizer { #ignored [ '\r' '\t' '\n' ' ' ] #invalid [ '\\' ';' '=' ] #translate { '!' invert '#' selector '$' image '%' modulo '&' and '(' open_round ')' close_round '*' multiply '+' add ',' comma '-' subtract '.' dot '/' divide ':' colon '<' smaller '>' bigger '?' macro '[' open_square ']' close_square '^' xor '{' open_curly '|' or '}' close_curly '~' concatinate "!=" not_equals "%=" modulo_assign "&&" logical_and "&=" and_assign "*=" multiply_assign "+=" add_assign "-=" subtract_assign "->" case "/=" divide_assign "::" contains ":=" assign "<=" smaller_equal "==" equals ">=" grater_equal "^=" xor_assign "^^" logical_xor "|=" or_assign "||" logical_or } } #keyword_tokenizer { #translate { alias alias any any as as base base break break case case continue continue derive derive else else enumeration enumeration export export false false final final for for if if implement implement implied implied import import iterate iterate label label loop loop macro macro match match module module mutable mutable namespace namespace native native not not pass pass public public return return root root scope scope self self structure structure super super terminate terminate trait trait true true while while } } #identifier_tokenizer { #prefix [ a b c d e f g h i j k l m n o p q r s t u v w x y z _ ] #type_prefix [ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z _ ] } 
